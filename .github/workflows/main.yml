# Nome da sua pipeline, que aparecerá na aba "Actions" do GitHub
name: Verificação com ESBMC e Deploy do Dashboard

# Gatilho (trigger): a pipeline roda a cada 'push' na branch 'main'
on:
  push:
    branches: [ main ]

jobs:
  #----------------------------------------------------
  # JOB 1: Verificar o código com ESBMC
  #----------------------------------------------------
  verify:
    runs-on: ubuntu-latest
    steps:
      # 1. Baixa o código do seu repositório para o ambiente da pipeline
      - name: Checkout do repositório
        uses: actions/checkout@v4

    # 2. Instala o ESBMC usando a Action correta do Marketplace
      - name: Instalar o ESBMC
        uses: ssvlab/setup-esbmc-action@v1
        with:
          version: 'latest'       

      # 3. Executa a verificação com ESBMC
      #    'continue-on-error: true' é CRUCIAL. Garante que, mesmo se o ESBMC encontrar um erro
      #    (e a verificação falhar), a pipeline continue para a etapa de deploy do dashboard.
      - name: Rodar verificação com ESBMC
        run: esbmc seu_codigo.c --json-output results.json
        continue-on-error: true

     # 4. Salva o arquivo results.json como um "artefato"
      #    A condição 'if: always()' garante que este passo SEMPRE execute,
      #    mesmo que o passo anterior (rodar o esbmc) tenha falhado.
      - name: Upload do artefato de resultados
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: esbmc-results
          path: results.json

  #-----------------------------------------------------------------
  # JOB 2: Preparar e publicar o dashboard no GitHub Pages
  #-----------------------------------------------------------------
  deploy-dashboard:
    # 'needs: verify' garante que este job só comece depois que o job 'verify' terminar.
    needs: verify
    # 'if: always()' garante que este job SEMPRE rode, mesmo que o 'verify' tenha falhado.
    # Queremos publicar o dashboard para ver os erros!
    if: always()
    runs-on: ubuntu-latest
    steps:
      # 1. Baixa o código novamente para ter acesso aos arquivos do dashboard (html, css, js)
      - name: Checkout do repositório
        uses: actions/checkout@v4

      # 2. Cria a pasta 'public' que será publicada
      - name: Criar pasta de deploy
        run: mkdir ./public

      # 3. Baixa o artefato 'results.json' do job anterior para dentro da pasta 'public'
      - name: Download do artefato de resultados
        uses: actions/download-artifact@v4
        with:
          name: esbmc-results
          path: ./public
      
      # 4. Prepara os arquivos do dashboard, copiando-os para a pasta 'public'
      - name: Preparar arquivos do dashboard
        run: |
          cp index.html style.css script.js public/

      # 5. Usa uma Action da comunidade para fazer o deploy da pasta 'public' no GitHub Pages
      - name: Deploy no GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
